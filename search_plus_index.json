[{"url":"./","title":"实验框架","level":"1.1","keywords":[],"body":"实验框架整体设计说明 层级划分 实验框架设计上的整体架构按照各次实验内容进行了层次划分，从底层的操作系统级别的页式文件管理到顶层的SQL命令行交互，主要可以划分为如下的层级结构。 上述图片中模块后编号表示对应的实验编号。 此处按照实验设计的顺序简单介绍各个模块的主要功能： 缓存和磁盘：底层缓存和磁盘管理，支持UNIX操作系统（Linux+Mac），不支持Windows操作系统。 日志：仅负责存储日志信息。 记录管理：负责数据库系统中关系内记录的管理，实现了对于表(Table)，记录(Record)，以及字段(Field)等数据库系统基本组成部分的抽象，同时负责处理这些基本组成部分的到实际物理页面的序列化和反序列化。 事务管理：负责日志的解析以及在基于日志的自动恢复等操作，需要负责处理事务重做和事务回滚。 执行器：基于火山模型设计的简单执行器，基于上层给出的执行计划树完成查询的实际执行过程。 优化器：接收解析器的语法分析树，经过逻辑优化和物理优化过程转化为执行计划树。 并发控制：负责多个事务并发进行情况下的执行过程控制，管理锁和记录的多版本信息。 解析器：SQL语法解析，将原始SQL转化为语法分析树。 前端命令行：负责用户交互，实时接收SQL语句输入并给出查询结果的输出 功能模块划分 实验框架的源代码按照功能模块进行组织，此处按照各次实验中涉及的各个功能模块进行简单介绍： LAB 1 记录管理 record 模块 实现了记录(Record)和字段(Field)类型，实现了包括反序列化(Load)、序列化(Store)等基本函数。 table 模块 实现了表(Table)类型，表结构包含表的元信息(TableMeta)以及页面文件组成的实际存储数据。通过PageHanlde类可以实现物理页面的无格式数据到格式化记录的转化和操作。同时，可以通过配置隐藏列的方式向数据表中存储声明字段外的额外字段、例如后续实验中需要使用的记录标识(RID)、版本号(VERSION)、锁状态(WR_LOCK)等。 LAB 2 事务与日志 log 模块 实现了日志(Log)的序列化和解析，采用物理日志的方式记录数据变化。管理事务的REDO和UNDO过程。同时需要管理日志数据的组织和持久化过程，对于LAB 1实验没有影响。 storage 模块 底层缓存、磁盘的管理，由于缓存数据保存在内存中，需要结合日志模块以及磁盘保证写入数据的持久性。 LAB 3 执行器 exec 模块 执行器模块，包装了简单的执行器模型。对于每个事务建立新的执行器并记录基本的元信息，管理算子实际执行过程。 oper 模块 实现了抽象类算子结点(OperNode)，算子结点组织成树结构可以构成执行计划树，通过实现不同算子结点的Next函数，可以实现以向量化模型为基础的执行引擎。 LAB 4 优化器 optim 模块 实现了优化器(Optimizor)，对于上层visitor解析的抽象语法树进行逻辑优化和物理优化两个过程，形成高效的执行计划交由底层执行引擎进行处理。 LAB 5 并发控制 整体性的功能添加，本次实验中没有设计单独的独立功能模块。 其余模块 utils 模块 一些常用的数据结构，此处给出了并查集(UFSet)以及位图(Bitmap)。 result 模块 用于前端输出，包含记录头和记录内容。 system 模块 数据库管理模块，主要实现了元信息的管理。 parser 模块 解析器模块，将SQL语句转化为抽象语法树。 Extra cli.cpp为主程序入口。defines.h是通用头文件，可以将常量值和常用的类型声明置于该文件内。 last update at: 2022/3/11 19:17:33 "},{"url":"intro.html","title":"重要声明","level":"1.2","keywords":[],"body":"重要说明 代码位置 对于基础功能，仅需要正确补充填空区域的代码，实现对应的功能即可。 各次实验的填空区域均进行了注释，以LAB 1为例，仅需要在如下区间内填充代码即可。 // LAB 1 BEGIN // LAB 1 END 各位同学仅需要搜索对应的注释\"// LAB N BEGIN\"即可快速定位补充代码的区域。 补丁及更新说明 随着实验的推进，存在需要合并实验框架BUG补丁和实验框架更新补丁的情景，这里我们采用了远程分支合并的方式进行实验框架更新。 更新的具体流程如下： 首先，各位建立的仓库已经远程添加了额外的分支:debug和update。前者用于BUG补丁更新，后者用于式样框架更新，使用方法一致。 每次更新只需要拉取该分支最新内容并合并到主分支即可（冲突需自行解决）。 更新补丁的使用非常重要。所以助教将LAB 1中一个测例设置在远程分支update中来方便大家尽早掌握补丁合并的流程。 同时，所有补丁的发布将在课程群中通知，一般更新时间暂定为晚22:00左右。 提交说明 第N次实验截止后发布第N+1次实验，防止出现提交错误。 第N次实验截止后发布一个10天的作业补交窗口。 作业仅需要提交对应版本的commit id以及实验报告，commit id直接使用提交窗口的输入框提交，报告以pdf形式通过附件提交。 高级功能 高级功能不要求严格按照各次实验文档给出的推荐选项，只需要选择老师课程讲解过程中与实验相关的知识即可。 高级功能的添加要尽可能设计对应的测试用例，可以使用SQL测例，也可以使用google-test等工具进行单元测试。 高级功能的总评为3分，只需要给出一个合理的设计也能获得部分分数，但是希望取得高分则必须实现有挑战性的一些功能。 评分说明 每次实验 20 分，五次实验共 100 分。 对于每次实验： 15 分是自动化测试的结果，通过所有测试即可得到满分，可在 gitlab 的 CI 中查看测试结果 2 分是实验报告分，具体说明见报告说明 3 分是高级功能分，考虑到高级功能实现难度较大，每次实验只需完整实现一个高级功能即可得到满分，如果没有实现高级功能，可以在报告中写出高级功能的设计方式，也可得到部分分数。 报告说明 内容要求 报告需要至少包括如下内容： 基本功能的实现难点 每个功能实现大致用了多少时间，实验总耗时多少（该条仅用于课程调查，不影响评分） 3.（可选）高级功能实现方式 报告格式 要求为pdf形式。 没有具体内容模板，但是建议从报告结构上突出重点内容，例如采用标题突出段落重点。 不要直接将大段代码复制到报告中。 报告不要过长，过于冗长的报告可能会影响你的分数。 可以使用标准的示意图来展示自己的设计，图片不计算文字。不要使用过于抽象的手绘示意图。 BUG Report 对于实验框架的BUG可以在网络学堂的课程讨论区进行发布，方便其他同学查看。此处给出BUG Report的标准格式。 【重要BUG】\\【一般BUG】 位置: xxx.cpp(文件名) 117(debug分支中对应起始行号) 说明: ......(简要的说明文字) （如果有补丁文件，直接利用git diff创建补丁，置于附件中即可） git diff补丁文件制作方法教程： git checkout debug ## 建议每次修复BUG重新建立分支 git checkout -b debug-patch(任意分支名) ## 修复BUG git add . git commit -m \"Fix a bug in ...\" git diff debug > xxx.patch(任意patch名) ## 提交xxx.patch文件到讨论区 评分说明 时间规范 各位同学需要严格按照各个实验的截止时间完成各次实验任务，对于没有按时完成实验的同学会在实验得分上收到一定影响。 迟交实验具体的惩罚措施如下： 迟交成绩 = MAX(0, 实际成绩 (1 - 0.1 迟交天数)) 诚信规范 各位同学一定要独立完成各次实验，本课程鼓励同学们思想上的交流，但不建议同学们直接进行代码交换。如果发现严重的代码雷同，可能会面临助教谈话甚至于当此实验记为0分的风险。 保密规范 各位同学一定不要将本次实验放到公共仓库上。 last update at: 2022/3/11 17:49:02 "},{"url":"test.html","title":"测试说明","level":"1.3","keywords":[],"body":"测试说明 环境配置 本实验依赖 cmake, make, g++ 构建工具，解析器编译需要 flex 和 bison 工具，需先在本地环境安装这些依赖。 由于实验框架底层文件操作调用了 Unix 相关接口，故不支持 Windows 环境，Windows 用户建议使用 WSL，也可以使用 Virtualbox 或 VMWare 开一个 Ubuntu 虚拟机，然后参考下面的 Ubuntu 环境配置。 Ubuntu 环境配置 建议使用 Ubuntu 20.04 及更高版本，使用 apt 安装依赖： sudo apt install cmake make flex bison g++ macOS 环境配置 使用 homebrew 安装依赖： brew install cmake flex bison 测试是否配置好了环境 g++ -v flex --version bison --version 运行实验框架 配好环境后，按照以下步骤进行操作： 拉取实验仓库并重命名 使用 git clone 和 mv 命令（将 xxxxxxxxxx 替换为你的学号）： git clone git@git.tsinghua.edu.cn:dbtrain/2022/dbtrain-lab-xxxxxxxxx.git mv dbtrain-lab-xxxxxxxxx dbtrain-lab 仓库重命名操作是必须的，否则测试脚本无法正常工作。 拉取测试仓库 在同一文件夹下，使用 git clone 命令拉取测试仓库。 测试仓库应与实验仓库在同一父文件夹下，目录结构应为： <diretory> ├── dbtrain-lab │ ├── src │ ├── CMakeLists.txt │ ├── .gitlab-ci.yml │ ├── ... ├── dbtrain-lab-test │ ├── lab1 │ ├── check.py │ ├── ... └── ... 编译实验框架 进入 dbtrain-lab 目录，运行如下命令进行编译： cd dbtrain-lab mkdir build && cd build cmake .. make -j4 由于实验框架中部分函数需要同学们自己实现，所以编译过程中出现 no return statement in function returning non-void 的 warning 是正常的。 如果环境配置没有问题，应成功编译出可执行程序 main ： ... [ 94%] Linking CXX static library ../lib/libthdb.a [ 94%] Built target thdb Scanning dependencies of target main [ 97%] Building CXX object src/CMakeFiles/main.dir/cli.cpp.o [100%] Linking CXX executable ../bin/main [100%] Built target main 运行 ./bin/main 即可进入数据库交互界面： ./bin/main dbtrain> show databases; +----------+ | Database | +----------+ dbtrain> create database test; +---------+ | SUCCESS | +---------+ dbtrain> show databases; +----------+ | Database | +----------+ | test | +----------+ (1 rows) dbtrain> 通过 ctrl+c 或 ctrl+d 即可退出数据库交互界面。 数据库交互程序支持 -s 参数，该参数用于控制结果打印格式，加上该参数后将只打印必要字段，不打印表格框： ./bin/main -s dbtrain> use test; SUCCESS dbtrain> create table t(id int, name char(4), score float); SUCCESS dbtrain> desc t; Name | Type | Length id | INT | 4 name | STRING | 4 score | FLOAT | 8 该参数主要用于方便测试脚本进行结果比对，你在本地测试时无需使用该参数。 测试脚本使用方法 测试仓库目录结构如下： dbtrain-lab-test ├── README.md ├── check.py ├── lab1 │ ├── result │ │ ├── 00_setup.result │ │ ├── 10_basic.result │ │ ├── 20_error.result │ │ ├── 30_long_text.result │ │ └── 40_many_rows.result │ └── test │ ├── 00_setup.sql │ ├── 10_basic.sql │ ├── 20_error.sql │ ├── 30_long_text.sql │ └── 40_many_rows.sql └── test.sh check.py 为测试脚本，在第 1 次实验中，该脚本会通过 ../dbtrain-lab/build/bin/main -s 命令运行数据库，枚举 lab1/test 目录下的所有文件，将这些文件按照序号从小到大的顺序输入数据库。同时脚本会在 lab1 文件夹下建立 tmp 文件夹，将数据库的标准输出重定向到 tmp 文件夹下的文件中，最后将 tmp 文件夹的文件与 result 文件夹的文件内容进行对比，文件内容一致即通过测试。 脚本默认会运行 test 目录下的所有文件，你可以通过 -u 或 --until 参数控制脚本运行的文件，如 python3 check.py -u 10 将只会运行 00 和 10 两个测试文件。 result 文件格式说明 result 文件的每个结果对应 sql 文件中一条 SQL 的期望输出，两个结果之间用一个空行隔开，一个典型的结果格式如下： -- 10.show tables; Tables t_basic t_basic_2 第一行表示当前运行的是第几条 SQL 及对应的 SQL 语句，仅用于增加文件可读性，测试脚本比对结果时会去掉改行。 接下来的几行表示期望输出结果，SQL 对输出结果顺序没有要求，脚本会先将结果排序后再进行比对，因此如果你的数据库输出如下： Tables t_basic_2 t_basic 也可以通过该条测试。 测试脚本输出 测试通过时，脚本会输出： Test 00_setup PASSED Test 10_basic PASSED Test 20_error PASSED Test 30_long_text PASSED Test 40_many_rows PASSED 5 / 5 cases PASSED 测试失败分为如下几种情况： 结果数目错误： Incorrect number of results Expected: 26 Got: 23 Test 00_setup FAILED 测试 00_setup 中共 25 条 SQL，期望输出 26 个结果（包括退出数据库时输出的 Bye），但实际只输出了 23 个结果，可查看是否有某些 SQL 运行失败导致没有输出结果。 结果行数错误： SQL 20 Incorrect length Expected: 3 Got: 1 Test 30_multi_pages FAILED 测试 30_multi_pages 的第 20 条 SQL 期望输出 3 行，实际输出 1 行。 结果错误： SQL 14 Incorrect result Expected: age | INT | 4 Got: age | INT | 12884901892 Test 00_setup FAILED 第 14 条 SQL 输出结果与期望输出不一致，可在 result 文件中查看第 14 条 SQL 及对应输出。 异常退出： Traceback (most recent call last): File \"check.py\", line 105, in main if test_case.check(): File \"check.py\", line 46, in check tmp_results = tmp_result_file.read().splitlines() File \"/usr/lib/python3.8/codecs.py\", line 322, in decode (result, consumed) = self._buffer_decode(data, self.errors, final) UnicodeDecodeError: 'utf-8' codec can't decode byte 0x96 in position 347: invalid start byte Test 40_many_rows FAILED 脚本运行错误，根据报错信息，推测是由于输出文件中包含异常字符导致。 last update at: 2022/3/11 17:49:02 "},{"url":"workflow.html","title":"运行流程","level":"1.4","keywords":[],"body":"系统工作流程 SQL整体运行流程 如图所示，系统整体的工作流程主要可以概括为如下几个子过程： SQL解析：将原始SQL查询语句转化为抽象语法树 优化器：对于抽象语法树进行逻辑优化和物理优化过程，生成执行计划树 执行器：按照火山模型完成执行计划树，通过不同算子实现对于页面数据的访问和修改 "},{"url":"lab1.html","title":"lab 1: 记录管理","level":"2.1","keywords":[],"body":"LAB 1 记录管理实验文档 实验概述 本次实验主要关注于数据库底层记录管理模块的功能，理解无格式的原始字节数据到与格式化的记录之间的转化过程。重点关注于关系型数据库系统在页式文件管理系统中表的数据组织，如何在定长页面中管理记录的存储和加载。 实验任务 本次实验主要有两个任务： 阅读代码，对于记录管理模块有一个结构性的理解 设计底层记录页面组织，完成记录管理的各项基本功能 相关模块 record 模块：需要理解Record和Field的基本函数，同时实现Record的存储和加载函数。 table 模块：需要理解Table的基本函数，在实验中不要求处理数据表元信息(TableMeta)。重点关注于通过PageHandle在定长的页面中组织记录数据。 可选高级功能 不要求将高级功能集成到主分支中，建议单开分支完成实验。但是建议同学们设计验证自己实验结果的测例并给出测试的可视化结果展示。 变长记录存储：实现方式的示意图，以及使用前后存储空间变化 数据加密和数据压缩：给出相关性能参数以及实际HEX编码变化 删除记录整理：自动整理已经删除的记录条目，需要给出执行效率和存储空间变化 同时也鼓励同学们结合相关课程内容提出自己的创新设计。 一定要在报告中写明实现的高级功能 截止时间 2022年3月27日（第五周周日）晚23:59分前。 last update at: 2022/3/11 17:05:13 "}]